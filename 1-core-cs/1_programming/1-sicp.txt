Foreword
---
It doesn’t matter much what the programs are about or what applications they serve.
What does matter is how well they perform and how smoothly they fit with other 
programs in the creation of still greater programs. The programmer must seek both 
perfection of part and adequacy of collection.


Preface to the First Edition
---
Our design of this introductory computer-science subject reflects two major
concerns. First, a computer language is not just a way of getting a computer to 
perform operations but rather that it is a novel formal medium for expressing 
ideas about methodology. Second, the techniques used to control the intellectual 
complexity of large software systems.

The techniques we teach and draw upon are common to all of engineering design. 
We control complexity by building abstractions that hide details when appropriate. 
We control complexity by establishing conventional interfaces that enable us to 
construct systems by combining standard, well-understood pieces in a “mix and match” way. 
We control complex- xxii ity by establishing new languages for describing a design, 
each of which emphasizes particular aspects of the design and deemphasizes others.

Underlying our approach to this subject is our conviction that “com- puter science” 
is not a science and that its significance has little to do with computers. The computer 
revolution is a revolution in the way we think and in the way we express what we think.


Acknowledgments

------------------------------------------------------------------------------------
Building Abstractions with Procedures
------------------------------------------------------------------------------------

Computational process <=> data <=> program.

As we shall discover, Lisp’s flexibility in handling procedures as data makes it one 
of the most convenient languages in existence for exploring these techniques.

The elements of programming
  Any powerful programming language should provide ways to combine simple ideas 
  (procedures and data) to form more complex ideas (their combination and abstraction). 
  There are three mechanisms for accomplishing this: 
    -primitive expressions, which represent the simplest entities the language is
    concerned with
    -means of combination, by which compound elements are built from simpler ones, and 
    -means of abstraction, by which compound elements can be named and manipulated as units.


  Expressions
    For expressions, Lisp uses prefix notation, which has two advantages: 
      -may take arbitrary number of arguments
      -extends in a straightforward way

  Naming and the environment
    Name object association. In this case, object can be various things.
    General notion of environment is it being ‘memory’ to provide context in 
    which an evaluation takes place. This plays an important role in our understanding of program execution.

  Evaluating combinations
    General rule is to apply the leftmost operator to operands in its right. 
    There are exceptions to this rule and they are called special forms 
    (e.g., (define x 2) define isn’t applied to x and 2 but it associates x 
    with 2, which is a different rule than the general rule).

    The various kinds of expressions (each with its associated evaluation rule) 
    constitute the syntax of the programming language. In comparison with 
    most other programming languages, Lisp has a very simple syntax; that 
    is, the evaluation rule for expressions can be described by a simple 
    general rule together with specialized rules for a small number of special forms.

  Compound procedures
    (define (⟨name⟩ ⟨formal parameters⟩) ⟨body⟩)
  Conditional expressions and predicates
    (cond (⟨p1⟩ ⟨e1⟩)
    (⟨p2⟩ ⟨e2⟩)
    …
    (⟨p3⟩ ⟨e3⟩))
    (⟨p⟩ ⟨e⟩) is called clause
  Procedures as black-box abstractions

Procedures and the processes they generate
  Linear recursion and iteration
    recursive process vs recursive procedure
    Tree recursion
    Orders of growth
    Exponentiation
    Greatest common divisors
  Formulating abstractions with higher-order procedures
    Procedures as arguments
    Constructing procedures using lambda
    Procedures as general methods
    Procedures as returned values


------------------------------------------------------------------------------------
Building Abstractions with Data
------------------------------------------------------------------------------------
We turn in this chapter to another key aspect of any programming
language: the means it provides for building abstractions by
combining data objects to form compound data.

Why do we want compound data in a programming language? For
the same reasons that we want compound procedures: to elevate the
conceptual level at which we can design our programs, to increase the
modularity of our designs, and to enhance the expressive power of our
language.


1. Compound data and data abstaction (how it helps make our programs much easier to design,
maintain, and modify)
    Our programs should use data in such a way as to make no assumptions
    about the data that are not strictly necessary for performing
    the task at hand. At the same time, a “concrete” data representation is
    defined independent of the programs that use the data.

    a. Procedures (cons, car and cdr of pair) as glue to combine data objects to form more complex data
    objects. (there are many possible kinds of glue and this is one of them). 

    b. Idea of 'closure' - that the glue we use for combining data objects should allow
    us to combine not only primitive data objects, but compound data objects as well.
        * Representing 
            sequences - pairs where the first points to value and the second
            points to another pair; the second of the last pair is marked with
            special end-to-list symbol. 
            trees - sequences with compound data objects

    c. Idea of compound data objects being able to serve as 'conventional
    interfaces' for combining program modules in mix-and-match ways.
        * Sequences as conventional interfaces: the basic premise here is data
        objects -> sequence, which serves as conventional interface allows us to define
        certain standartized processing operations on sequences; those library
        of general operations then can be used to build robust and modular
        systems. 

    A crucial idea about languages and program design is the approach of stratified design,
    the notion that a complex system should be structured as a sequence
    of levels that are described using a sequence of languages. Each level is
    constructed by combining parts that are regarded as primitive at that
    level, and the parts constructed at each level are used as primitives at
    the next level. The language used at each level of a stratified design has
    primitives, means of combination, and means of abstraction appropriate
    to that level of detail.


2. Symbolic expressions - data whose elementary parts can be arbitrary symbols rather than only numbers.
    a. there are many ways in which a given data structure can be represented in terms of simpler objects, 
    and the choice of representation can have significant impact on the time and space requirements of 
    processes that manipulate the data.

3. The problem of working with data that may be represented differently by different parts of a program
    a. This leads to the need to implement generic operations, which handle many different types of data.
        * type tags - explicit information about how data objects are to be processed
        * data-directed programming - a technique that allows individual data representations to be designed 
        in isolation and then combined additively (i.e., without modification).
            - two-dimensional table that contains the possible operations on one axis and the possible 
            types on the other axis. The entries in the table are the procedures that implement each operation
            for each type of argument presented. Additivity in this case means you don't have to change any 
            existing procedures; you only need to add new entries to the table.
        * massage passing (work with 'intelligent procedures' vs work with 'intelligent objects')???
        
4. The idea of coercion
   Building procedures that transform an object of one type into an equivalent
   object of another type; these procedures use a special coercion table to
   look up a procedure that transforms one type to another. 









